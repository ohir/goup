#!/bin/bash

# This script bootstraps the GoUp setup and should always be checked into the vcs repository.
# It downloads the required GoUp version and executes it.

# Set the version as required.
VERSION="v0.0.10"

# Set the required targets (e.g. all|gomobile/android|gomobile/ios|gomobile/android:gomobile/ios)
TARGETS="all"

################

if [[ "$OSTYPE" == "darwin"* ]]; then
    osarch="darwin-amd64"
else
    osarch="linux-amd64"
fi

default="\e[39m"
lightRed="\e[91m"
lightGreen="\e[92m"

while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
    c | clean | -c | -clean | --c | --clean)
        shift
        CLEAN=true
        EXIT=true
        ;;
    i | info | -i | -info | --i | --info)
        printf "OS: $lightGreen$osarch$default\n"
        printf "Wrapper version: $lightGreen$VERSION$default\n"
        printf "Targeting: $lightGreen$TARGETS$default\n"
        shift
        EXIT=true
        ;;
    *) # unknown option
        printf "$lightRed$key$default not supported.\n"
        exit 1
        ;;
    esac
done

GOUPDIR=".goup"
if [ "$CLEAN" = true ]; then
    printf "Removing $lightRed$(pwd)/$GOUPDIR$default.\n"
    rm -rf $GOUPDIR
    if [ "$?" -gt "0" ]; then
        exit $?
    fi
fi

if [ "$EXIT" = true ]; then
    exit 0
fi

set -e

execName="$GOUPDIR$VERSION"
exec="$GOUPDIR/$execName"

if [[ -f "$exec" ]]; then
    echo ""
else
    printf "Creating $lightGreen$(pwd)/$GOUPDIR$default.\n"
    mkdir -p $GOUPDIR
    cd $GOUPDIR

    printf "Fetching wrapper version $lightGreen$VERSION$default.\n"
    curl "https://cdn.worldiety.org/github.com/worldiety/goup/$VERSION/$osarch/goup" --output $execName
    chmod +x $execName
    cd ..
fi

buildDir=$(pwd)

"$exec" -version

"$exec" -dir "$buildDir" -loglevel 0 -targets "$TARGETS"
